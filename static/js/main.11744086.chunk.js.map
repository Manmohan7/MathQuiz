{"version":3,"sources":["Game.js","Score.js","App.js","serviceWorker.js","index.js"],"names":["Game","props","updateState","generateValues","value1","value2","value3","processedTotal","setState","current","Math","floor","random","checkAnswer","valSelected","total","state","isCorrect","updateMarks","className","this","onClick","Component","Score","correctAnswers","totalAnswers","App","correct","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPA8DeA,E,kDA3Db,WAAYC,GAAQ,IAAD,uBAEjB,cAAMA,IAWRC,YAAc,WAAO,IAAD,EAC6B,EAAKC,iBADlC,mBACbC,EADa,KACLC,EADK,KACGC,EADH,KACWC,EADX,KAElB,EAAKC,UAAS,SAACC,GAAD,MAAc,CAC1BL,OAAQA,EACRC,OAAQA,EACRC,OAAQA,EACRC,eAAgBA,OAnBD,EAuBnBJ,eAAiB,WACf,IAAIC,EAASM,KAAKC,MAAsB,IAAhBD,KAAKE,UACzBP,EAASK,KAAKC,MAAsB,IAAhBD,KAAKE,UACzBN,EAASI,KAAKC,MAAsB,IAAhBD,KAAKE,UAG7B,MAAO,CAACR,EAAQC,EAAQC,EAFHI,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgBR,EAASC,EAASC,IA3BtD,EAgCnBO,YAAc,SAACC,GACb,IAAIC,EAAQ,EAAKC,MAAMZ,OAAS,EAAKY,MAAMX,OAAS,EAAKW,MAAMV,OAC3DW,EAAa,EAAKD,MAAMT,iBAAmBQ,GAAyB,SAAhBD,GACrD,EAAKE,MAAMT,iBAAmBQ,GAAyB,UAAhBD,EAE1C,EAAKb,MAAMiB,YAAYD,GACvB,EAAKf,eAtCY,MAI8B,EAAKC,iBAJnC,mBAIZC,EAJY,KAIJC,EAJI,KAIIC,EAJJ,KAIYC,EAJZ,YAKjB,EAAKS,MAAQ,CACXZ,OAAQA,EACRC,OAAQA,EACRC,OAAQA,EACRC,eAAgBA,GATD,E,qDAyCT,IAAD,OACP,OACE,6BAEE,yBAAKY,UAAU,YAEZC,KAAKJ,MAAMZ,OAFd,MAEyBgB,KAAKJ,MAAMX,OAFpC,MAE+Ce,KAAKJ,MAAMV,OAF1D,MAEqEc,KAAKJ,MAAMT,eAFhF,KAIA,yBAAKY,UAAU,gBACb,4BAAQE,QAAS,kBAAM,EAAKR,YAAY,UAAxC,UACA,4BAAQQ,QAAS,kBAAM,EAAKR,YAAY,WAAxC,iB,GApDSS,aCWJC,MAXf,SAAetB,GACb,OACE,6BACE,mDAEE,oCAAWA,EAAMuB,eAAjB,MAAsCvB,EAAMwB,aAA5C,QCyBOC,E,4MA1BbV,MAAQ,CACNS,aAAc,EACdD,eAAgB,G,EAGlBN,YAAc,SAACD,GACb,IAAIU,EAAUV,EAAY,EAAI,EAE9B,EAAKT,UAAS,SAACC,GAAD,MAAc,CAC1Be,eAAgBf,EAAQe,eAAiBG,EACzCF,aAAchB,EAAQgB,aAAe,O,uDAKvC,OACE,yBAAKN,UAAU,OACb,2CACA,wDACA,kBAAC,EAAD,CAAMD,YAAaE,KAAKF,cACxB,kBAAC,EAAD,CAAOM,eAAgBJ,KAAKJ,MAAMQ,eAAgBC,aAAcL,KAAKJ,MAAMS,oB,GArBjEH,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.11744086.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Game extends Component {\n  constructor(props) {\n\n    super(props)\n\n    let [value1, value2, value3, processedTotal] = this.generateValues()\n    this.state = {\n      value1: value1,\n      value2: value2,\n      value3: value3,\n      processedTotal: processedTotal \n    }\n  }\n  \n  updateState = () => {\n    let [value1, value2, value3, processedTotal] = this.generateValues()\n    this.setState((current) => ({\n      value1: value1,\n      value2: value2,\n      value3: value3,\n      processedTotal: processedTotal\n    }))\n  }\n\n  generateValues = () => {\n    let value1 = Math.floor(Math.random() * 100)\n    let value2 = Math.floor(Math.random() * 100)\n    let value3 = Math.floor(Math.random() * 100)\n    let processedTotal = Math.floor(Math.random() * 3) + value1 + value2 + value3\n\n    return [value1, value2, value3, processedTotal]\n  }\n\n  checkAnswer = (valSelected) => {\n    let total = this.state.value1 + this.state.value2 + this.state.value3\n    let isCorrect = (this.state.processedTotal === total && valSelected === 'true') || \n      (this.state.processedTotal !== total && valSelected === 'false')\n\n    this.props.updateMarks(isCorrect)\n    this.updateState()\n  }\n\n  render() {\n    return (\n      <div>\n\n        <div className=\"equation\">\n          \n          {this.state.value1} + {this.state.value2} + {this.state.value3} = {this.state.processedTotal} </div>\n        \n        <div className=\"game-buttons\">\n          <button onClick={() => this.checkAnswer('true')}> True </button>\n          <button onClick={() => this.checkAnswer('false')}> False </button>\n        </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default Game","import React from 'react'\n\nfunction Score(props) {\n  return (\n    <div>\n      <p> \n        Your current score is \n        <strong> { props.correctAnswers } / { props.totalAnswers } </strong>\n      </p>\n    </div>\n  )\n}\n\nexport default Score","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './Game';\nimport Score from './Score'\n\nclass App extends Component {\n  state = {\n    totalAnswers: 0,\n    correctAnswers: 0\n  };\n\n  updateMarks = (isCorrect) => {\n    let correct = isCorrect ? 1 : 0\n    \n    this.setState((current) => ({\n      correctAnswers: current.correctAnswers + correct,\n      totalAnswers: current.totalAnswers + 1\n    }))\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1> Math Quiz </h1>\n        <h3> Is this True or False? </h3>\n        <Game updateMarks={this.updateMarks} />\n        <Score correctAnswers={this.state.correctAnswers} totalAnswers={this.state.totalAnswers} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}